// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdatePosition
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

int nums;
float time;
vector bounds;

float random(int idx)
{
    return frac(sin(dot(idx,float2(12.9898,78.233)))*43758.5453123*time); 
}

float random_x (float val)
{
    return frac(sin(dot(val,float2(12.9898, 23.531)))*43758.5453123*time);
}

float random_y (float val)
{
    return frac(cos(dot(val,float2(64.9898,32.512)))*12.5453123*time);
}

RWStructuredBuffer<float2> positions;
float GetRandomPositionX(int idx)
{
    const float r = random(idx);
    const float x = (random_x(r) - 0.5f) * bounds.x;
    return x;
}
float GetRandomPositionY(int idx)
{
    const float r = random(idx);
    const float y = (random_y(r) - 0.5f) * bounds.y;
    return y;
}

[numthreads(32,1,1)]
void UpdatePosition (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    positions[id.x].x = GetRandomPositionX(id.x);
    positions[id.x].y = GetRandomPositionY(id.x);
}