#pragma kernel CalculateExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel UpdatePosition

#include "SpatialHash.hlsl"
static const int NumThreads = 64;
static const float PI = 3.141592653589793238462643383279502884197169;

int numParticles;
float smoothingRadius;
float gravity;
float collisionDamping;
float deltaTime;
float targetDensity;
float pressureMultiplier;
float nearPressureMultiplier;
float particleMass;
float2 boundsSize;
RWStructuredBuffer<float2> positions;
RWStructuredBuffer<float2> predictedPositions;
RWStructuredBuffer<float2> velocities;
RWStructuredBuffer<float> densities;
RWStructuredBuffer<float2> pressureForces;
RWStructuredBuffer<uint3> SpatialIndices;
RWStructuredBuffer<uint> SpatialOffsets;


float Pow(float a, int n)
{
    float temp = a;
    for (int i = 0; i < n; i++)
    {
        temp *= a;
    }
    return temp;
}

float Max(float a, float b)
{
    return a >= b ? a : b;
}

float2 GetRandomDir(int idx)
{
    const float x = clamp(frac(sin(dot(idx, float2(12.9898, 78.233))) * 43758.5453123 * deltaTime), -0.1, 0.1);
    const float y = clamp(frac(cos(dot(idx, float2(64.9898, 32.512))) * 12.5453123 * deltaTime), -0.1, 0.1);
    return float2(x, y);
}

/*
float SpikyKernelPow3(float dst, float radius)
{
    if (dst < radius)
    {
        float v = radius - dst;
        return v * v * v * 10 / (PI * Pow(smoothingRadius, 5));
    }
    return 0;
}

float SpikyKernelPow2(float dst, float radius)
{
    if (dst < radius)
    {
        float v = radius - dst;
        return v * v * 6 / (PI * Pow(smoothingRadius, 4));
    }
    return 0;
}

float DerivativeSpikyPow3(float dst, float radius)
{
    if (dst <= radius)
    {
        float v = radius - dst;
        return -v * v * 30 / (Pow(smoothingRadius, 5) * PI);
    }
    return 0;
}

float DerivativeSpikyPow2(float dst, float radius)
{
    if (dst <= radius)
    {
        float v = radius - dst;
        return -v * 12 / (Pow(smoothingRadius, 4) * PI);
    }
    return 0;
}
*/

static float SmoothingKernel(float dist, float radius)
{
    if(dist >= radius) return 0;
    
    float volume = PI * Pow(radius, 4) / 6;
    return (radius-dist)*(radius-dist)/volume;
}

static float SmoothingKernelDerivative(float dist, float radius)
{
    if(dist >= radius) return 0;
    
    const float scale = 12 / (PI * Pow(radius, 4));
    return (dist-radius) * scale;
}

[numthreads(NumThreads,1,1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= numParticles) return;

    uint idx = id.x;
    int2 cell = GetCell2D(predictedPositions[idx], smoothingRadius);
    uint hash = HashCell2D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialIndices[id.x] = uint3(idx, hash, key);
    //SpatialOffsets[idx] = numParticles;
}

[numthreads(NumThreads,1,1)]
void CalculateExternalForces(uint id : SV_DispatchThreadID)
{
    // Add gravity force
    velocities[id.x] += float2(0, -gravity) * deltaTime;

    // Predict positions
    predictedPositions[id.x] = positions[id.x] + velocities[id.x] * deltaTime;
}

float CalculateDensity(float2 pos)
{
    float density = 0;
    //float nearDensity = 0;
    for(int i=0; i<numParticles; i++)
    {
        float dist = distance(predictedPositions[i], pos);
        float influence = SmoothingKernel(dist,smoothingRadius);
        density += particleMass * influence;
    }
    return density;
    //return float2(density, nearDensity);

    /*int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    // Neighbour search
    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key) break;
            // Skip if hash does not match
            if (indexData[1] != hash) continue;

            uint neighbourIndex = indexData[0];
            float2 neighbourPos = predictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate density and near density
            float dst = sqrt(sqrDstToNeighbour);
            density += SpikyKernelPow2(dst, smoothingRadius);
            nearDensity += SpikyKernelPow3(dst, smoothingRadius);
        }
    }

    return float2(density, nearDensity);*/
}

[numthreads(NumThreads,1,1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= numParticles) return;
    densities[id.x] = CalculateDensity(predictedPositions[id.x]);
}

float CalculatePressure(float density)
{
    float densityError = density - targetDensity;
    float pressure = densityError * pressureMultiplier;
    return pressure;
}

float CalculateNearPressure(float nearDensity)
{
    return nearPressureMultiplier * nearDensity;
}

float CalculateSharedPressure(float densityA, float densityB)
{
    const float pressureA = CalculatePressure(densityA);
    const float pressureB = CalculatePressure(densityB);
    return (pressureA + pressureB) / 2;
}

[numthreads(NumThreads,1,1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if((int)id.x >= numParticles) return;
    const int particleIndex = id.x;
    float2 force = float2(0,0);
    for (int otherParticleIndex = 0; otherParticleIndex < numParticles; otherParticleIndex++)
    {
        if (particleIndex == otherParticleIndex) continue;
        
        float2 offset = predictedPositions[otherParticleIndex] - predictedPositions[particleIndex];
        float dist = distance(predictedPositions[otherParticleIndex],predictedPositions[particleIndex]);
        const float2 dir = dist == 0 ? GetRandomDir(id.x): offset / dist;
        
        const float slope = SmoothingKernelDerivative(dist, smoothingRadius);
        const float density = densities[otherParticleIndex];
        const float sharedPressure = CalculateSharedPressure(density, densities[particleIndex]);
        //force += CalculatePressure(density) * dir * slope * particleMass / density;
        force += sharedPressure * dir * slope * particleMass / density;
    }
    pressureForces[id.x] = force;
    const float2 acceleration = force / densities[id.x];
    velocities[id.x] += acceleration * deltaTime;

    /*if (id.x >= numParticles) return;

    float density = densities[id.x][0];
    float densityNear = densities[id.x][1];
    float pressure = CalculatePressure(density);
    float nearPressure = CalculateNearPressure(densityNear);
    float2 pressureForce = 0;

    float2 pos = predictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    // Neighbour search
    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key) break;
            // Skip if hash does not match
            if (indexData[1] != hash) continue;

            uint neighbourIndex = indexData[0];
            // Skip if looking at self
            if (neighbourIndex == id.x) continue;

            float2 neighbourPos = predictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate pressure force
            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

            float neighbourDensity = densities[neighbourIndex][0];
            float neighbourNearDensity = densities[neighbourIndex][1];
            float neighbourPressure = CalculatePressure(neighbourDensity);
            float neighbourNearPressure = CalculateNearPressure(neighbourNearDensity);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DerivativeSpikyPow3(dst, smoothingRadius) * sharedPressure /
                neighbourDensity;
            pressureForce += dirToNeighbour * DerivativeSpikyPow2(dst, smoothingRadius) * sharedNearPressure /
                neighbourNearDensity;
        }
    }
    //forces[id.x] = pressureForce;
    float2 acceleration = pressureForce / density;
    velocities[id.x] += acceleration * deltaTime;*/
}

void ResolveCollisions(uint idx)
{
    float2 pos = positions[idx];
    float2 vel = velocities[idx];
    float2 halfBoundsSize = boundsSize / 2;
    float2 edgeDst = halfBoundsSize - abs(pos);

    if (edgeDst.x <= 0)
    {
        pos.x = halfBoundsSize.x * sign(pos.x);
        vel.x *= -1 * collisionDamping;
    }
    if (edgeDst.y <= 0)
    {
        pos.y = halfBoundsSize.y * sign(pos.y);
        vel.y *= -1 * collisionDamping;
    }

    positions[idx] = pos;
    velocities[idx] = vel;
}

[numthreads(NumThreads,1,1)]
void UpdatePosition(uint id : SV_DispatchThreadID)
{
    if ((int)id.x >= numParticles) return;
    positions[id.x] += velocities[id.x] * deltaTime;
    ResolveCollisions(id.x);
}
